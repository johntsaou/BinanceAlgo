# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/gist/johntsaou/0c78cb30eb8ea11db58b83e6db8ae9d3/untitled0.ipynb
"""

pip install websocket-client

pip install python-binance

!wget http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz 
!tar xvzf ta-lib-0.4.0-src.tar.gz
import os
os.chdir('ta-lib') # Can't use !cd in co-lab
!./configure --prefix=/usr
!make
!make install
os.chdir('../')
!pip install TA-Lib

pip install ta-lib

import websocket

url = 'https://anaconda.org/conda-forge/libta-lib/0.4.0/download/linux-64/libta-lib-0.4.0-h516909a_0.tar.bz2'
!curl -L $url | tar xj -C /usr/lib/x86_64-linux-gnu/ lib --strip-components=1
url = 'https://anaconda.org/conda-forge/ta-lib/0.4.19/download/linux-64/ta-lib-0.4.19-py37ha21ca33_2.tar.bz2'
!curl -L $url | tar xj -C /usr/local/lib/python3.7/dist-packages/ lib/python3.7/site-packages/talib --strip-components=3
import talib

import numpy
import json
import talib
import pprint
import websocket
from binance.client import Client
from binance.enums import *

SOCKET = "wss://stream.binance.com:9443/ws/ethusdt@kline_5m"

EMA1_PERIOD = 9
EMA2_PERIOD = 21
TRADE_SYMBOL = 'ETHUSD'
TRADE_QUANTITY = 0.01

closes = []
in_position = False

client = Client(#KEY, #KEY2)

def order(side, quantity, symbol,order_type=ORDER_TYPE_MARKET):
    try:
        print("sending order")
        order = client.create_order(symbol=symbol, side=side, type=order_type, quantity=quantity)
        print(order)
    except Exception as e:
        print("an exception occured - {}".format(e))
        return False

    return True

    
def on_open(ws):
    print('opened connection')

def on_close(ws):
    print('closed connection')

def on_message(ws, message):
    global closes, in_position
    #print('received message')
    json_message = json.loads(message)
    #pprint.pprint(json_message)

    candle = json_message['k']

    is_candle_closed = candle['x']
    close = candle['c']

    if is_candle_closed:
        print("candle closed at {}".format(close))
        closes.append(float(close))
        print("closes")
        print(closes, len(closes))


        if len(closes) > EMA2_PERIOD:
           np_closes = numpy.array(closes)
           ema1 = talib.EMA(np_closes, EMA1_PERIOD)
           ema2= talib.EMA(np_closes, EMA2_PERIOD)
           print("all emas calculated so far")
           print(ema1,ema2)
           last_ema1= ema1[-1]
           last_ema2= ema2[-1]

           print("the current ema is {}".format(last_ema1))
           print("the current long ema is {}".format(last_ema2))

           if last_ema2 > last_ema1:
                if in_position:
                    print("Sell")
                    order_succeeded = order(SIDE_SELL, TRADE_QUANTITY, TRADE_SYMBOL)
                    if order_succeeded:
                        in_position = False
                else:
                    print("Time to sell if we have")
            
           if last_ema2 < last_ema1:
                if in_position:
                    print("Should buy, but you already own it.")
                else:
                    print(" BUY ")
                    # put binance buy order logic here
                    oorder_succeeded = order(SIDE_BUY, TRADE_QUANTITY, TRADE_SYMBOL)
                    if order_succeeded:
                        in_position = True

                
ws = websocket.WebSocketApp(SOCKET, on_open=on_open, on_close=on_close, on_message=on_message)
ws.run_forever()
